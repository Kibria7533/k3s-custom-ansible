- hosts: k3s_master
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Check if K3s is already installed on master
      stat:
        path: /etc/rancher/k3s
      register: k3s_installed_master

    - name: Install K3s on master if not already installed
      shell: |
        curl -sfL https://get.k3s.io | K3S_TOKEN={{ k3s_cluster_token }} K3S_VERSION={{ k3s_version }} INSTALL_K3S_EXEC="--cluster-init" sh -
      when: k3s_installed_master.stat.exists == False

    - name: Ensure /etc/rancher/k3s directory exists on master
      file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'

    - name: Create registries.yaml on master
      copy:
        dest: /etc/rancher/k3s/registries.yaml
        content: |
          mirrors:
            "10.105.100.13:5000":
              endpoint:
                - "http://10.105.100.13:5000"
          configs:
            "10.105.100.13:5000":
              auth:
                username: {{ docker_username }}
                password: {{ docker_password }}
              tls:
                insecure_skip_verify: true
      notify:
        - Restart K3s on master
        - Restart containerd on master

    - name: Get Kubeconfig file if necessary
      fetch:
        src: /etc/rancher/k3s/k3s.yaml
        dest: ./k3s.yaml
        flat: yes
      when: k3s_installed_master.stat.exists == False

  handlers:
    - name: Restart K3s on master
      systemd:
        name: k3s
        state: restarted

- hosts: k3s_nodes
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Check if K3s is already installed on workers
      stat:
        path: /etc/rancher/k3s
      register: k3s_installed_workers

    - name: Install K3s on workers if not already installed
      shell: |
        curl -sfL https://get.k3s.io | K3S_URL={{ k3s_url }} K3S_TOKEN={{ k3s_cluster_token }} K3S_VERSION={{ k3s_version }} sh -
      when: k3s_installed_workers.stat.exists == False

    - name: Ensure /etc/rancher/k3s directory exists on workers
      file:
        path: /etc/rancher/k3s
        state: directory
        mode: '0755'

    - name: Create registries.yaml on workers
      copy:
        dest: /etc/rancher/k3s/registries.yaml
        content: |
          mirrors:
            "10.105.100.13:5000":
              endpoint:
                - "http://10.105.100.13:5000"
          configs:
            "10.105.100.13:5000":
              auth:
                username: {{ docker_username }}
                password: {{ docker_password }}
              tls:
                insecure_skip_verify: true
      notify:
        - Restart K3s-agent on workers
        - Restart containerd on workers

  handlers:
    - name: Restart K3s-agent on workers
      systemd:
        name: k3s-agent
        state: restarted



- hosts: localhost
  vars_files:
    - vars.yaml
  tasks:
    - name: Modify k3s.yaml file
      replace:
        path: ./k3s.yaml
        regexp: 'server: https://127\.0\.0\.1:6443'
        replace: 'server: https://10.105.100.56:6443'

    - name: Check if Docker secret exists
      command: kubectl --kubeconfig=./k3s.yaml get secret imagepullsecret
      register: docker_secret_exists
      ignore_errors: true
      changed_when: false

    - name: Create Docker secret
      shell: "kubectl --kubeconfig=./k3s.yaml create secret docker-registry imagepullsecret --docker-server=10.105.100.13 --docker-username=admin --docker-password=bdrisq1w2e3r4t5"
      args:
        executable: /bin/bash
      when: docker_secret_exists.rc != 0

    - name: Check if argocd namespace exists
      command: kubectl --kubeconfig=./k3s.yaml get namespace argocd
      register: argocd_namespace_exists
      ignore_errors: true

    - name: Check if argocd-server service exists
      command: kubectl --kubeconfig=./k3s.yaml get service argocd-server -n argocd
      register: argocd_service_exists
      ignore_errors: true

    - name: Create argocd namespace if it doesn't exist
      shell: kubectl --kubeconfig=./k3s.yaml create namespace argocd
      ignore_errors: true
      when: argocd_namespace_exists.rc != 0

    - name: Apply Argo CD manifests if they haven't been applied
      shell: kubectl --kubeconfig=./k3s.yaml apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
      ignore_errors: true
      when: argocd_service_exists.rc != 0

    - name: Patch argocd-server service to type NodePort if necessary
      shell: |
        kubectl --kubeconfig=./k3s.yaml patch svc argocd-server -n argocd -p '{"spec": {"type": "NodePort"}}'
      ignore_errors: true
      when: argocd_service_exists.rc == 0 and ("NodePort" not in argocd_service_exists.stdout)

    - name: Retrieve Argo CD initial password
      command: kubectl --kubeconfig=./k3s.yaml -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}"
      register: argocd_password_raw
      changed_when: false

    - name: Decode password
      set_fact:
        argocd_password: "{{ argocd_password_raw.stdout | b64decode }}"
      changed_when: false

    - name: Save Argo CD initial password to file
      copy:
        content: "{{ argocd_password }}"
        dest: "argocd_password.txt"

    - name: Install argocli
      shell: curl -sSL -o ~/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64 && chmod +x ~/argocd
      args:
        creates: ~/argocd
      register: argocli_install_result
      changed_when: argocli_install_result.rc != 0

    - name: Login to Argo CD
      command: ~/argocd login 10.105.100.56:30454 --username admin --password "{{ argocd_password }}" --insecure
      register: argocd_login
      changed_when: false
      ignore_errors: true

    - name: Verify argocli installation
      command: ~/argocd version --server 10.105.100.56:30454 --insecure login
      changed_when: false
      ignore_errors: true

    - name: Check if Git repository is already added to Argo CD
      shell: "~/argocd repo list | grep -q 'git@10.105.100.11:root/bdris-helm-charts.git'"
      args:
        executable: /bin/bash
      register: repo_exists
      ignore_errors: true
      changed_when: false

    - name: Add Git repository to Argo CD
      shell: "~/argocd repo add git@10.105.100.11:root/bdris-helm-charts.git --insecure-ignore-host-key --ssh-private-key-path /home/devops/.ssh/id_ed25519"
      args:
        executable: /bin/bash
      when: repo_exists.rc != 0

    - name: Create bdris-frontend in Argo CD
      shell: "~/argocd app create bdris-frontend --repo git@10.105.100.11:root/bdris-helm-charts.git --path bdris-frontend --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Create bdris-user-registration in Argo CD
      shell: "~/argocd app create bdris-user-registration --repo git@10.105.100.11:root/bdris-helm-charts.git --path bdris-user-registration --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Create birth-registration-service in Argo CD
      shell: "~/argocd app create birth-registration-service --repo git@10.105.100.11:root/bdris-helm-charts.git --path birth-registration-service --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Create keycloakx in Argo CD
      shell: "~/argocd app create keycloakx --repo git@10.105.100.11:root/bdris-helm-charts.git --path keycloakx --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Create bdris-admin in Argo CD
      shell: "~/argocd app create bdris-admin --repo git@10.105.100.11:root/bdris-helm-charts.git --path bdris-admin --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true
    - name: Create bdris-master-data in Argo CD
      shell: "~/argocd app create bdris-master-data --repo git@10.105.100.11:root/bdris-helm-charts.git --path bdris-master-data --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true

    - name: Create bdris-role-management in Argo CD
      shell: "~/argocd app create bdris-role-management --repo git@10.105.100.11:root/bdris-helm-charts.git --path bdris-role-management --dest-server https://kubernetes.default.svc --dest-namespace default --values preview.values.yaml --sync-policy automated"
      args:
        executable: /bin/bash
      ignore_errors: true